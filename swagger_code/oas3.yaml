openapi: 3.0.0
info:
  title: Ocio API
  description: API for emergencies communication and users management. 
  version: 1.1.0
servers:
  - url: https://api.ocio.it/v1
    description: Localhost

paths:
  /login:
    post:
      summary: Sends a request for the JWT
      requestBody:
        description: User's credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: JWT generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT for authentication
        '404':
          description: User not found
        '401':
          description: Wrong credentials
        '500':
          description: Error in token creation
      tags:
        - Login
  
  /emergencies:
    get:
      summary: Gets the list of the emergencies (in progress and ended), with the possibility to filter them
      parameters:
        - name: state
          in: query
          description: Filter for the state of the emergencies
          required: false
          schema:
            type: string
            enum: [in_progress, ended]
        - name: category
          in: query
          description: Filter for the category of the emergencies
          required: false
          schema:
            type: string
            enum: [frana, alluvione, ghiaccio, crollo_strutturale, incendio, neve, tempesta, caduta_albero]
        - name: startDate
          in: query
          description: Filter based on the start date of the emergency (and forth) 
          required: false
          schema:
            type: string
            format: date-time
            example: "2024-10-25T00:00:00Z"
        - name: keyword
          in: query
          description: Filter using one or more keywords
          required: false
          schema:
            type: array
            items:
              type: string
          explode: true
          example: ["frana", "alluvione"]
      responses:
        '200':
          description: (Filtered) list of the emergencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Emergency'
        '500':
          description: Error in emergencies recovery
      tags:
        - Emergencies

    post:
      summary: Creates a new emergency
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Emergency'
      responses:
        '201':
          description: Emergency created. Link in the Location header
          headers:
            Location:
              description: Link to the new emergency
              style: simple
              explode: false
              schema:
                type: string
        '400':
          description: Error in emergency creation
      tags:
        - Emergencies

  /emergencies/{id}:
    get:
      summary: Gets a single emergency
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Details of the emergency
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Emergency'
        '404':
          description: Emergency not found
        '500':
          description: Error in emergency recovery
      tags:
        - Emergencies

    put:
      summary: Updates the details of an emergency
      security:
        - bearerAuth: []      
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Emergency'
      responses:
        '200':
          description: Emergency updated successfully
        '404':
          description: Error in emergency update
      tags:
        - Emergencies

    delete:
      summary: Deletes an emergency
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Emergency deleted successfully
        '404':
          description: Emergency not found
        '500':
          description: Error in emergency deletion
      tags:
        - Emergencies

  /users:
    get:
      summary: Get a list of all the users
      responses:
        '200':
          description: List of the users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Error in users recovery
      tags:
        - Users

    post:
      summary: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created. Link in the Location header
          headers:
            Location:
              description: Link to the new user
              style: simple
              explode: false
              schema:
                type: string
        '400':
          description: Error in user creation
      tags:
        - Users

  /users/{id}:
    get:
      summary: Gets a single user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Details of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Error in user recovery
      tags:
        - Users

    delete:
      summary: Deletes a user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Error in user deletion
      tags:
        - Users

components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - password
      properties:
        id:
          type: integer
          description: ID of the user
          example: 10
        email:
          type: string
          description: Email of the user
          example: "mario.rossi@gmail.com"
        password:
          type: string
          description: Password of the user
          example: "password123"

    Emergency:
      type: object
      required:
        - id
        - title
        - category
        - startDate
        - location
        - state
      properties:
        id:
          type: integer
          description: ID of the emergency
          example: 2
        title:
          type: string
          description: Title of the emergency
          example: "Alluvione del sottopassaggio"
        category:
          type: string
          enum: [frana, alluvione, ghiaccio, crollo_strutturale, incendio, neve, tempesta, caduta_albero]
          description: Category of the emergency
          example: "frana"
        startDate:
          type: string
          format: date-time
          description: Timestamp indicating when the emergency started
          example: "2024-10-26T10:02:00Z"
        endDate:
          type: string
          format: date-time
          description: Timestamp indicating when the emergency finished
          example: "2024-10-26T15:30:00Z"
        location:
          type: string
          description: Location of the emergency
          example: "Via Sommarive 9"
        state:
          type: string
          enum: [in_progress, ended]
          default: "in_progress"
        description:
          type: string
          description: Description of the emergency
          example: "I forti venti hanno causato la caduta di un albero sulla strada in via Sommarive, la viabilità è stata di conseguenza sospesa temporaneamente."

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT